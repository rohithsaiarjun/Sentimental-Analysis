# -*- coding: utf-8 -*-
"""Deployment for nlp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LSPXd5yyo7cGjpFQ6Jjbwh1jXQMWdUDn
"""

import streamlit as st
import pickle
from sklearn.feature_extraction.text import TfidfVectorizer
from PIL import Image
import re
import string
import nltk
import spacy

# Load pre-trained model and vectorizer
try:
    with open("svm_model.pkl", "rb") as file:
        model = pickle.load(file)
    with open("tfidf_vectorizer.pkl", "rb") as file:
        vectorizer = pickle.load(file)
except FileNotFoundError:
    st.error("Model or vectorizer file not found. Please ensure the files are in the correct directory.")
    st.stop()

# Download NLTK stopwords
nltk.download('stopwords')
stopwords = nltk.corpus.stopwords.words('english')

# Text preprocessing functions
def clean_text(text):
    return text.lower().strip()

def remove_punctuation(text):
    return "".join([i for i in text if i not in string.punctuation])

def tokenization(text):
    return re.split(' ', text)

def remove_stopwords(text):
    return " ".join(i for i in text if i not in stopwords)

def lemmatizer(text):
    nlp = spacy.load('en_core_web_sm')
    doc = nlp(text)
    sent = [token.lemma_ for token in doc if not token.text in set(stopwords)]
    return ' '.join(sent)

# Streamlit app
st.title("Comprehensive Guide on NLP")
st.markdown("By Dangeti Rohith Sai Arjun")

# Display image
image = Image.open("image.png")
st.image(image, use_container_width=True)

# User input
st.subheader("Enter your text here:")
user_input = st.text_area("")

# Preprocess and predict
if st.button("Predict"):
    if user_input:
        try:
            # Preprocess the input text
            user_input = clean_text(user_input)
            user_input = remove_punctuation(user_input)
            user_input = tokenization(user_input)
            user_input = remove_stopwords(user_input)
            user_input = lemmatizer(user_input)

            # Vectorize and predict
            text_vectorized = vectorizer.transform([user_input])
            prediction = model.predict(text_vectorized)[0]

            # Display prediction
            st.header("Prediction:")
            if prediction == -1:
                st.subheader("The sentiment of the given text is: Negative")
            elif prediction == 0:
                st.subheader("The sentiment of the given text is: Neutral")
            elif prediction == 1:
                st.subheader("The sentiment of the given text is: Positive")
        except Exception as e:
            st.error(f"An error occurred during prediction: {e}")
    else:
        st.subheader("Please enter a text for prediction.")

# Display sentiment analysis image
image = Image.open("sentimental analysis image.png")
st.image(image, use_container_width=True)
